# pipeline will creating everything at once

pipeline {
    
    environment{
        DOCKERHUB_CREDENTIALS = credentials('aubreyz-dockerhub')
        AWS_EKS_REGION = 'us-east-1'
        AWS_EKS_CLUSTER_NAME = "finalv1"
        k8 = 'k8'
    }
    agent {label 'awsDeploy2'}
        
    stages{
    stage('Build backend'){
        steps {
            dir('backend'){
            sh 'docker build -t aubreyz/d10be25 .'
            }
        }
    }
    stage('Build frontend'){
        steps {
            dir('frontend'){
            sh 'docker build -t aubreyz/d10fe25 .'
            }
        }
    }
    stage('Login') {
        steps {
            dir('backend'){
            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
    }
    stage('Push backend') {
        steps {
            dir('backend'){ 
                sh 'docker push aubreyz/d10be25'
            }
        }
    }
    stage('Push frontend') {
        steps {
            dir('frontend'){ 
                sh 'docker push aubreyz/d10fe25'
            }
        }
    }

    stage('Init') {
        agent {label 'awsDeploy1'}
        steps {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'), 
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')]) {
                            dir('ecsTerraform') {
                              sh 'terraform init' 
                            }
         }
        }
    }

    stage('Plan') {
        agent {label 'awsDeploy1'}
        steps {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'), 
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')]) {
                            dir('ecsTerraform') {
                              sh 'terraform plan -out plan.tfplan -var="aws_access_key=$aws_access_key" -var="aws_secret_key=$aws_secret_key"' 
                            }
         }
        }
    }

      stage('Apply') {
        agent {label 'awsDeploy1'}
       steps {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'), 
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')]) {
                            dir('ecsTerraform') {
                              sh 'terraform apply plan.tfplan' 
                            }
         }
        }
    }

        stage('Storing Subnets ID for EKS') {
        agent {label 'awsDeploy1'}
       steps {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'), 
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')]) {
                            dir('ecsTerraform') {
                            script{
                                def publicSub1 = sh(script: 'terraform output -raw publicsub1', returnStdout: true).trim()
                                def publicSub2 = sh(script: 'terraform output -raw publicsub2', returnStdout: true).trim()
                                def privateSub1 = sh(script: 'terraform output -raw privatesub1', returnStdout: true).trim()
                                def privateSub2 = sh(script: 'terraform output -raw privatesub2', returnStdout: true).trim()
                                echo "Public Subnet 1 ID: ${publicSub1}"
                                echo "Public Subnet 2 ID: ${publicSub2}"
                                echo "Private Subnet 1 ID: ${privateSub1}"
                                echo "Private Subnet 1 ID: ${privateSub1}"

                            }
                            }
         }
        }
    }


        stage('Adding AWS Credentials for EKS instance'){
            agent{
                label 'awsDeploy3'
            }

                steps{
                    script {
                        withCredentials([
                            string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'),
                            string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')
                        ]) { 
                            sh 'echo "starting now"'
                            sh 'aws configure set aws_access_key_id $aws_access_key'
                            sh 'aws configure set aws_secret_access_key $aws_secret_key'
                            sh 'aws configure set default.region $AWS_EKS_REGION'
                            sh 'echo "AWS Credentials are all set"'
                        }
                    }
                }
            
            }
        stage('Check and Apply Cluster'){
            agent{
                label 'awsDeploy3'
            }
            steps{
                script{
                        withCredentials([
                            string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'),
                            string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')
                        ]){
                def checkcluster = sh(script: "aws eks --region $AWS_EKS_REGION list-clusters | grep -w $AWS_EKS_CLUSTER_NAME", returnStatus: true) == 0

                if(checkcluster){
                    sh 'echo "AWS Cluster exists"'
                } else {
                        sh "eksctl create cluster $AWS_EKS_CLUSTER_NAME --vpc-private-subnets=$privateSub1,$privateSub2 --vpc-public-subnets=$publicSub1,$publicSub2 --without-nodegroup"
                    } 
                    }
                }
                        }
            }
        
        

            stage('Check and Create Node groups'){
            agent{
                label 'awsDeploy3'
            }
            steps{
                script{
                        withCredentials([
                            string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'),
                            string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')
                        ]){
                def nodeexists = sh(script: "eksctl get nodegroup --cluster $AWS_EKS_CLUSTER_NAME | grep -v 'CLUSTER' | grep -v 'NAME' | wc -l", returnStdout: true).trim()

                if(nodeexists.toInteger() > 0){
                    sh 'echo "AWS Node Group exists"'
                } else{ 
                        sh "eksctl create nodegroup --cluster $AWS_EKS_CLUSTER_NAME --node-private-networking --node-type t2.medium --nodes 2"
                     
                }
                        }
            }
        }
        }
        stage('applying to all files to EKS') {
            agent {
                label 'awsDeploy3'
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'),
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')
                    ]) { 

                        sh "aws eks --region $AWS_EKS_REGION update-kubeconfig --name $AWS_EKS_CLUSTER_NAME"
                        sh "kubectl apply -f $k8"
                    }
                }
            }
        }
        stage('EKS Cluster has been updated successfully'){
        agent{
            label 'awsDeploy3'
        }
        steps{
            echo 'Yay, files has been completed'
        }
    }



//   stage('Destroy') {
//     agent {label 'awsDeploy2'}
//     steps {
//           withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'aws_access_key'),
//               string(credentialsId: 'AWS_SECRET_KEY', variable: 'aws_secret_key')]) {
//                 dir('ecsTerraform') {
//                     sh 'terraform destroy -auto-approve -var="aws_access_key=$aws_access_key" -var="aws_secret_key=$aws_secret_key"'
//                   }
//           }
//     }
// }
}
}
