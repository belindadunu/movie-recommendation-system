# name: Django-Docker Build-Push

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v3
#         with:
#           python-version: 3.9

#       # - name: Cache pip dependencies
#       #   uses: actions/cache@v2
#       #   with:
#       #     path: ~/.cache/pip
#       #     key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/*requirements.txt') }}
#       #     restore-keys: |
#       #       ${{ runner.os }}-pip-

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r ./backend/requirements.txt

#       - name: Run tests
#         run: |
#           python ./backend/manage.py test

#       - name: Build images
#         run: |
#           docker build -t aubreyz/d10be5 ./backend
#           docker build -t aubreyz/d10-fe5 ./frontend

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Push images
#         run: |
#           docker push aubreyz/d10be5
#           docker push aubreyz/d10-fe5

# on: push
# name: deploy
# jobs:
#   deploy:
#     name: deploy to cluster
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2
    
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: deploy to backend cluster
#       uses: kodermax/kubectl-aws-eks@main
#       env:
#         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: backend
#         IMAGE_TAG: aubreyz/d10be5:${{ github.sha }}
#       with:
#         args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
#     - name: verify deployment
#       uses: kodermax/kubectl-aws-eks@main
#       env:
#         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#       with:
#         args: rollout status deployment/$ECR_REPOSITORY
#               kubectl get pods 
#               kubectl describe deploy backend

#     - name: deploy to frontend cluster
#       uses: kodermax/kubectl-aws-eks@main
#       env:
#         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: frontend
#         IMAGE_TAG: aubreyz/d10-fe5:${{ github.sha }}
#       with:
#         args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REPOSITORY:$IMAGE_TAG
        
#     - name: verify frontend deployment
#       uses: kodermax/kubectl-aws-eks@main
#       env:
#         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#       with:
#         args: rollout status deployment/$ECR_REPOSITORY
#               kubectl get pods 
#               kubectl describe deploy backend
